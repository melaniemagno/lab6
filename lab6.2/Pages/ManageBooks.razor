@page "/managebooks"
<h3>Manage Books</h3>
@using lab6._2.Data
@using lab6._2.Pages

<div>
    Managing the books list:
    <div>
        Adding a book: fill out info first:
        
        Title: <input type="text" id="title" @bind="title" />
        Author: <input type="text" id="author" @bind="author" />
        ISBN #: <input type="text" id="isbn" @bind="isbn" />
        <button @onclick=AddBook>Add Book</button>
    </div>
    ------------------------------------------
    <div>
        Enter the book id number you want to edit
        Book ID #: <input type="text" id="ID" @bind="inputID" />
        <button @onclick=EditBook>Edit Book</button>
    </div>
    ------------------------------------------
    <div>
        Enter the book id number you want to delete
        <input type="text" id="ID" @bind="inputID2" />
        <button @onclick=DeleteBook>Delete Book</button>

    </div>
    ------------------------------------------
    <div>
        List of available books:
        <button @onclick=ListBooks>List Books</button>

    </div>    
</div>

------------------------------------------------------
<div>
    Managing the user list:
    <button @onclick=AddUser>Add User</button>
    <button @onclick=EditUser>Edit User</button>
    <button @onclick=DeleteUser>Delete User</button>
    <button @onclick=ListUsers>List User</button>
</div>





@code {
    static List<Book> books = new List<Book>();
    static List<User> users = new List<User>();
    static Dictionary<User, List<Book>> borrowedBooks = new Dictionary<User, List<Book>>();
    string title;
    string author;
    string isbn;
    void AddBook()
    {
        int id = books.Any() ? books.Max(b => b.Id) + 1 : 1;
        books.Add(new Book { Id = id, Title = title, Author = author, ISBN = isbn });
    }

    string inputID;
    void EditBook()
    {
        ListBooks();

        if (int.TryParse(inputID, out int bookId))
        {

            Book book = books.FirstOrDefault(b => b.Id == bookId);

            if (book != null)
            {
                Console.Write("Enter new Title (leave blank to keep current): ");
                string title = Console.ReadLine();
                if (!string.IsNullOrEmpty(title)) book.Title = title;

                Console.Write("Enter new Author (leave blank to keep current): ");
                string author = Console.ReadLine();
                if (!string.IsNullOrEmpty(author)) book.Author = author;

                Console.Write("Enter new ISBN (leave blank to keep current): ");
                string isbn = Console.ReadLine();
                if (!string.IsNullOrEmpty(isbn)) book.ISBN = isbn;

                Console.WriteLine("Book updated successfully!\n");
            }
            else
            {
                Console.WriteLine("Book not found!\n");
            }
        }
        else
        {
            Console.WriteLine("Invalid input!\n");
        }
    }

    string inputID2;
    void DeleteBook()
    {

        ListBooks();

        if (int.TryParse(inputID2, out int bookId))
        {

            Book book = books.FirstOrDefault(b => b.Id == bookId);

            if (book != null)
            {
                books.Remove(book);
                Console.WriteLine("Book deleted successfully!\n");
            }
            else
            {
                Console.WriteLine("Book not found!\n");
            }
        }
        else
        {
            Console.WriteLine("Invalid input!\n");
        }
    }

    void ListBooks()
    {
        var bookGroups = books.GroupBy(b => b.Id).Select(bookGroup => new { Book = bookGroup.First(), Count = bookGroup.Count() });

        foreach (var group in bookGroups)
        {
            Console.WriteLine($"{group.Book.Id}. {group.Book.Title} by {group.Book.Author} (ISBN: {group.Book.ISBN}) - Available Copies: {group.Count}");
        }

        Console.WriteLine();
    }

    void ManageUsers()
    {

        string option;

        do
        {
            Console.WriteLine("\nManage Users");
            Console.WriteLine("1. Add User");
            Console.WriteLine("2. Edit User");
            Console.WriteLine("3. Delete User");
            Console.WriteLine("4. List Users");
            Console.WriteLine("5. Back");

            Console.Write("Choose an option: ");
            option = Console.ReadLine();

            switch (option)
            {
                case "1":
                    AddUser();
                    break;
                case "2":
                    EditUser();
                    break;
                case "3":
                    DeleteUser();
                    break;
                case "4":
                    ListUsers();
                    break;
            }
        } while (option != "5");
    }

    void AddUser()
    {
        Console.Write("\nEnter User Name: ");
        string name = Console.ReadLine();

        Console.Write("Enter Email: ");
        string email = Console.ReadLine();

        int id = users.Any() ? users.Max(u => u.Id) + 1 : 1;
        users.Add(new User { Id = id, Name = name, Email = email });
        Console.WriteLine("User added successfully!\n");
    }

    void EditUser()
    {

        ListUsers();
        Console.Write("\nEnter User ID to Edit: ");

        if (int.TryParse(Console.ReadLine(), out int userId))
        {

            User user = users.FirstOrDefault(u => u.Id == userId);

            if (user != null)
            {
                Console.Write("Enter new Name (leave blank to keep current): ");
                string name = Console.ReadLine();
                if (!string.IsNullOrEmpty(name)) user.Name = name;

                Console.Write("Enter new Email (leave blank to keep current): ");
                string email = Console.ReadLine();
                if (!string.IsNullOrEmpty(email)) user.Email = email;

                Console.WriteLine("User updated successfully!\n");
            }
            else
            {
                Console.WriteLine("User not found!\n");
            }
        }
        else
        {
            Console.WriteLine("Invalid input!\n");
        }
    }

    void DeleteUser()
    {

        ListUsers();
        Console.Write("\nEnter User ID to Delete: ");

        if (int.TryParse(Console.ReadLine(), out int userId))
        {

            User user = users.FirstOrDefault(u => u.Id == userId);

            if (user != null)
            {
                users.Remove(user);
                Console.WriteLine("User deleted successfully!\n");
            }
            else
            {
                Console.WriteLine("User not found!\n");
            }
        }
        else
        {
            Console.WriteLine("Invalid input!\n");
        }
    }

    void ListUsers()
    {

        Console.WriteLine("\nUsers:");

        foreach (var user in users)
        {
            Console.WriteLine($"{user.Id}. {user.Name} (Email: {user.Email})");
        }

        Console.WriteLine();
    }

    string inputID3;
    string userID;
    void BorrowBook()
    {
        ListBooks();

        if (int.TryParse(inputID3, out int bookId))
        {

            Book book = books.FirstOrDefault(b => b.Id == bookId);

            if (book != null && books.Count(b => b.Id == bookId) > 0)
            {
                ListUsers();

                if (int.TryParse(userID, out int userId))
                {

                    User user = users.FirstOrDefault(u => u.Id == userId);

                    if (user != null)
                    {
                        if (!borrowedBooks.ContainsKey(user))
                        {
                            borrowedBooks[user] = new List<Book>();
                        }
                        borrowedBooks[user].Add(book);
                        books.Remove(book);
                        Console.WriteLine("Book borrowed successfully!\n");
                    }
                    else
                    {
                        Console.WriteLine("User not found!\n");
                    }
                }
                else
                {
                    Console.WriteLine("Invalid input!\n");
                }
            }
            else
            {
                Console.WriteLine("Book not found or no available copies!\n");
            }
        }
        else
        {
            Console.WriteLine("Invalid input!\n");
        }
    }

    string userID2;
    void ReturnBook()
    {

        ListBorrowedBooks();

        if (int.TryParse(userID2, out int userId))
        {

            User user = users.FirstOrDefault(u => u.Id == userId);

            if (user != null && borrowedBooks.ContainsKey(user) && borrowedBooks[user].Count > 0)
            {

                Console.WriteLine("Borrowed Books:");

                for (int i = 0; i < borrowedBooks[user].Count; i++)
                {
                    Console.WriteLine($"{i + 1}. {borrowedBooks[user][i].Title} by {borrowedBooks[user][i].Author} (ISBN: {borrowedBooks[user][i].ISBN})");
                }

                Console.Write("\nEnter the number of the book to return: ");

                if (int.TryParse(Console.ReadLine(), out int bookNumber) && bookNumber >= 1 && bookNumber <= borrowedBooks[user].Count)
                {

                    Book bookToReturn = borrowedBooks[user][bookNumber - 1];

                    borrowedBooks[user].RemoveAt(bookNumber - 1);
                    books.Add(bookToReturn);

                    Console.WriteLine("Book returned successfully!\n");
                }
                else
                {
                    Console.WriteLine("Invalid input!\n");
                }
            }
            else
            {
                Console.WriteLine("User not found or no borrowed books!\n");
            }
        }
        else
        {
            Console.WriteLine("Invalid input!\n");
        }
    }

    void ListBorrowedBooks()
    {
        Console.WriteLine("\nBorrowed Books:");

        foreach (var entry in borrowedBooks)
        {
            Console.WriteLine($"User: {entry.Key.Name}");

            foreach (var book in entry.Value)
            {
                Console.WriteLine($"{book.Title} by {book.Author} (ISBN: {book.ISBN})");
            }
            Console.WriteLine();
        }
    }
}